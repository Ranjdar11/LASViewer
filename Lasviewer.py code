from tkinter import Tk, Menu, messagebox, filedialog, Frame, Text, Scrollbar, VERTICAL, END, StringVar, Checkbutton, IntVar
from tkinter.ttk import Style, Notebook
import lasio
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2Tk
from matplotlib.figure import Figure

file_data = {}  
selected_curves = {}  
curve_checkbuttons = {}  
fig, ax = None, None
las_content_text = None
notebook = None  

def load_las_files():
    file_paths = filedialog.askopenfilenames(filetypes=[("LAS files", "*.las")])
    if not file_paths:
        messagebox.showerror("Error", "No files selected.")
        return None
    try:
        data = {file: lasio.read(file).df() for file in file_paths}
        return data
    except Exception as e:
        messagebox.showerror("Error", f"Failed to read LAS files: {e}")
        return None

def plot_two_curves(notebook):
    global file_data, selected_curves, fig, ax

    curves_to_plot = []
    for file, curve_vars in selected_curves.items():
        curves_in_file = []
        for curve_var in curve_vars:
            if curve_var.get() == 1:  
                df = file_data[file]
                curve_name = df.columns[curve_vars.index(curve_var)]
                curves_in_file.append(curve_name)

        if not curves_in_file:
            continue  # Skip files with no selected curves

        for curve_name in curves_in_file:
            df = file_data[file]
            curves_to_plot.append((df.index, df[curve_name], curve_name, file))

    if not curves_to_plot:
        messagebox.showwarning("Warning", "No valid curves selected to plot.")
        return

    fig, ax = plt.subplots(figsize=(10, 6))
    for depth, curve_values, curve_name, file in curves_to_plot:
        ax.plot(curve_values, depth, label=f"{curve_name} ({file.split('/')[-1]})")

    ax.invert_yaxis()  # Invert y-axis for depth visualization
    ax.xaxis.set_label_position('top')
    ax.xaxis.tick_top()
    ax.set_title("Selected Curves")
    ax.set_xlabel("Values")
    ax.set_ylabel("Depth (m)")
    ax.legend()
    ax.grid(True)

    for widget in notebook.winfo_children():
        if notebook.tab(widget, "text") == "Graph":
            for child in widget.winfo_children():
                child.destroy()

            frame = Frame(widget)
            frame.pack(fill="both", expand=True)

            # Navigation Toolbar
            toolbar = NavigationToolbar2Tk(FigureCanvasTkAgg(fig, master=frame), frame)
            toolbar.update()
            toolbar.pack(side="top", fill="both", expand=True)

            canvas = FigureCanvasTkAgg(fig, master=frame)  
            canvas.get_tk_widget().pack(fill="both", expand=True)
            canvas.draw()

def select_files_and_curves():
    global file_data, curve_checkbuttons, selected_curves, las_content_text, notebook

    data = load_las_files()
    if not data:
        return

    file_data.update(data)
    file_names = list(file_data.keys())

    las_content_text.insert(END, "\n" + "\n".join(file_names) + "\n")

    for file in file_names:
        if file not in curve_checkbuttons:
            # Create a new frame for each file
            frame = Frame(las_content_text)
            frame.pack(anchor="w", pady=5)
            label = Text(frame, height=1, width=50, wrap="none")
            label.insert(END, f"Curves from: {file.split('/')[-1]}")
            label.config(state="disabled")
            label.pack(side="top")

            curve_vars = []
            for col in file_data[file].columns:
                var = IntVar(value=0)
                checkbutton = Checkbutton(frame, text=col, variable=var, command=lambda file=file: plot_two_curves(notebook))
                checkbutton.pack(side="top", anchor="w")
                curve_vars.append(var)

            curve_checkbuttons[file] = curve_vars
            selected_curves[file] = curve_vars

def display_help():
    messagebox.showinfo("Help", (
        "LAS File Viewer\n\n"
        "This tool allows you to visualize curves from LAS (Log ASCII Standard) files.\n\n"
        "Instructions:\n"
        "- Load multiple LAS files.\n"
        "- Select one curve from each file to plot using checkboxes.\n"
        "- Plot the curves and visualize the data.\n"
        "- Exit the application using the 'Exit' menu."
    ))

def display_about_me():
    messagebox.showinfo("About Me", (
        "Name: Ranjdar A. Mahmedsalih\n"
        "Geosciences Professional\n"
        "Ranjdar11@gmail.com\n"
    ))

def create_graph_tab(notebook):
    global fig, ax
    graph_frame = Frame(notebook)
    graph_frame.grid_rowconfigure(0, weight=1)
    graph_frame.grid_columnconfigure(0, weight=1)
    notebook.add(graph_frame, text="Graph")

    # Placeholder for displaying the plot
    fig, ax = plt.subplots(figsize=(10, 6))
    canvas = FigureCanvasTkAgg(fig, master=graph_frame)
    canvas.get_tk_widget().pack(fill="both", expand=True)

def main():
    global curve_checkbuttons, selected_curves, las_content_text, notebook

    root = Tk()
    root.title("LAS File Viewer")
    root.geometry("800x600")

    style = Style()
    style.configure("TButton", font=("Arial", 10), padding=6)
    style.configure("TLabel", font=("Arial", 11))

    menu_bar = Menu(root)

    file_menu = Menu(menu_bar, tearoff=0)
    file_menu.add_command(label="Load LAS File(s)", command=select_files_and_curves)
    file_menu.add_separator()
    file_menu.add_command(label="Exit", command=root.quit)
    menu_bar.add_cascade(label="File", menu=file_menu)

    help_menu = Menu(menu_bar, tearoff=0)
    help_menu.add_command(label="Help", command=display_help)
    menu_bar.add_cascade(label="Help", menu=help_menu)

    about_menu = Menu(menu_bar, tearoff=0)
    about_menu.add_command(label="About Me", command=display_about_me)
    menu_bar.add_cascade(label="About", menu=about_menu)

    root.config(menu=menu_bar)

    notebook = Notebook(root)
    notebook.pack(fill="both", expand=True)

    input_frame = Frame(notebook)
    input_frame.grid_rowconfigure(0, weight=1)
    input_frame.grid_columnconfigure(0, weight=1)
    notebook.add(input_frame, text="Input")

    scrollbar = Scrollbar(input_frame, orient=VERTICAL)
    las_content_text = Text(input_frame, wrap="none", yscrollcommand=scrollbar.set, height=30, width=100)
    scrollbar.config(command=las_content_text.yview)
    las_content_text.grid(row=0, column=0, sticky="nsew")
    scrollbar.grid(row=0, column=1, sticky="ns")

    create_graph_tab(notebook)

    root.mainloop()

# Run the application
if __name__ == "__main__":
    main()
